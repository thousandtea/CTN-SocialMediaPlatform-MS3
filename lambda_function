import json
import pymysql
import uuid
import boto3
from botocore.exceptions import ClientError

# MySQL database configuration
# Replace the following values with your own database information
MYSQL_CONFIG = {
    'host': 'your-database-host',  # Replace with your database host address
    'user': 'your-database-user',  # Replace with your database username
    'password': 'your-database-password',  # Replace with your database password
    'db': 'your-database-name',  # Replace with your database name
    'charset': 'utf8mb4',
    'cursorclass': pymysql.cursors.DictCursor
}

def lambda_handler(event, context):
    try:
        connection = pymysql.connect(**MYSQL_CONFIG)

        if event['type'] == 'new_forum_message':
            send_forum_message_notification(connection, event['message'])
        elif event['type'] == 'new_post':
            create_post(connection, event['poster_email'], event['post_content'])
        elif event['type'] == 'new_comment':
            create_comment(connection, event['commenter_email'], event['comment_content'], event['post_id'], event.get('parent_comment_id'))
        else:
            print("Event type not recognized")
        
        connection.close()
        return {
            'statusCode': 200,
            'body': json.dumps('Operation completed successfully')
        }
    except Exception as e:
        print(e)
        return {
            'statusCode': 500,
            'body': json.dumps('Error processing the request')
        }

def send_forum_message_notification(connection, message):
    with connection.cursor() as cursor:
        cursor.execute("SELECT email FROM users")
        for row in cursor.fetchall():
            send_notification(row['email'], "New forum message", message)

def create_post(connection, poster_email, post_content):
    post_id = generate_unique_post_id()
    with connection.cursor() as cursor:
        sql = "INSERT INTO posts (post_id, poster_email, content) VALUES (%s, %s, %s)"
        cursor.execute(sql, (post_id, poster_email, post_content))
    connection.commit()
    send_post_notification_to_friends(connection, poster_email, post_id)

def create_comment(connection, commenter_email, comment_content, post_id, parent_comment_id=None):
    comment_id = generate_unique_comment_id()
    with connection.cursor() as cursor:
        sql = "INSERT INTO comments (comment_id, post_id, commenter_email, content, parent_comment_id) VALUES (%s, %s, %s, %s, %s)"
        cursor.execute(sql, (comment_id, post_id, commenter_email, comment_content, parent_comment_id))
    connection.commit()
    send_comment_notification_to_poster(connection, post_id, commenter_email)
    if parent_comment_id:
        send_reply_notification_to_commenter(connection, parent_comment_id, commenter_email)

def send_post_notification_to_friends(connection, poster_email, post_id):
    with connection.cursor() as cursor:
        sql = "SELECT friend_email FROM friends WHERE user_email = %s"
        cursor.execute(sql, (poster_email,))
        friends = cursor.fetchall()
        for friend in friends:
            send_notification(friend['friend_email'], "New post", f"Your friend {poster_email} has posted a new message with ID {post_id}")

def send_comment_notification_to_poster(connection, post_id, commenter_email):
    with connection.cursor() as cursor:
        sql = "SELECT poster_email FROM posts WHERE post_id = %s"
        cursor.execute(sql, (post_id,))
        post = cursor.fetchone()
        if post:
            send_notification(post['poster_email'], "New comment", f"Your post with ID {post_id} has been commented on by {commenter_email}")

def send_reply_notification_to_commenter(connection, parent_comment_id, commenter_email):
    with connection.cursor() as cursor:
        sql = "SELECT commenter_email FROM comments WHERE comment_id = %s"
        cursor.execute(sql, (parent_comment_id,))
        comment = cursor.fetchone()
        if comment:
            send_notification(comment['commenter_email'], "Reply to your comment", f"Your comment with ID {parent_comment_id} has been replied to by {commenter_email}")

def send_notification(recipient, subject, message):
    # Use AWS SES to send email notifications
    ses_client = boto3.client('ses')
    try:
        # Replace with your verified email address in AWS SES
        verified_email = 'your-verified-email@example.com'
        response = ses_client.send_email(
            Source=verified_email,
            Destination={'ToAddresses': [recipient]},
            Message
